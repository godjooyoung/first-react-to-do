{"ast":null,"code":"var _jsxFileName = \"/Users/jooyoungshin/first-react-to-do/src/component/Todo.jsx\",\n  _this = this,\n  _s = $RefreshSig$();\nimport { useDispatch, useSelector } from 'react-redux';\nimport { crateTodo, deleteTodo, updateTodo, selectTodo } from '../redux/modules/todoReduser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Todo = _ref => {\n  _s();\n  let {\n    cardBtnClickEventhandle,\n    area\n  } = _ref;\n  return function (cardBtnClickEventhandle) {\n    /** 스토어에 접근해서 값을 읽어보자 */\n    const todos = useSelector(state => {\n      console.log(\"todo 컴포넌트에서!. 스토어 접근후 가져온값 > \", state.todoReducer.todoList);\n      return state.todoReducer.todoList;\n    });\n\n    /** 컴포넌트의 요청정보를 스토어로 전달해줄 디스패처를 불러온다 */\n    const dispatch = useDispatch();\n\n    /**\n     * 완료, 취소, 삭제 버튼을 눌렀을때 동작하는 함수\n     * @param {*} event \n     */\n    function cardBtnClickEventhandle(e) {\n      let btnFlg = e.target.innerText; // 완료, 취소, 삭제 값을 가진다.        \n      let todoId = e.target.id; // 해당 todo의 아이디값을 가져온다. \n\n      if (btnFlg === '삭제') {\n        dispatch(deleteTodo());\n      } else if (btnFlg == '완료' || btnFlg == '취소') {\n        dispatch(updateTodo());\n      } else {\n        dispatch(selectTodo());\n      }\n    }\n\n    // todos.isDone 값에 따라 리턴되는 배열을 달리한다.\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: todos.filter(item => {\n        return area == 'workingZoen' ? item.isDone == false : item.isDone == true;\n      }).map(item => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task-title\",\n            children: item.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 29\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task-body\",\n            children: item.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 29\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task-btns\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: cardBtnClickEventhandle,\n              id: item.id,\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 33\n            }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: cardBtnClickEventhandle,\n              id: item.id,\n              children: area == 'workingZoen' ? '완료' : '취소'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 33\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 29\n          }, _this)]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, _this);\n      })\n    }, void 0, false);\n  }(cardBtnClickEventhandle);\n};\n_s(Todo, \"FiMoGXqJtx1oUFQRG74TZ9QIm7U=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = Todo;\nexport default Todo;\nvar _c;\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"names":["useDispatch","useSelector","crateTodo","deleteTodo","updateTodo","selectTodo","jsxDEV","_jsxDEV","Fragment","_Fragment","Todo","_ref","_s","cardBtnClickEventhandle","area","todos","state","console","log","todoReducer","todoList","dispatch","e","btnFlg","target","innerText","todoId","id","children","filter","item","isDone","map","className","title","fileName","_jsxFileName","lineNumber","columnNumber","_this","body","onClick","_c","$RefreshReg$"],"sources":["/Users/jooyoungshin/first-react-to-do/src/component/Todo.jsx"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { crateTodo, deleteTodo, updateTodo, selectTodo } from '../redux/modules/todoReduser'\n\nconst Todo = ({ cardBtnClickEventhandle, area }) => {\n\n    /** 스토어에 접근해서 값을 읽어보자 */\n    const todos = useSelector((state) => {\n        console.log(\"todo 컴포넌트에서!. 스토어 접근후 가져온값 > \", state.todoReducer.todoList)\n        return state.todoReducer.todoList\n    })\n\n    /** 컴포넌트의 요청정보를 스토어로 전달해줄 디스패처를 불러온다 */\n    const dispatch = useDispatch()\n\n    /**\n     * 완료, 취소, 삭제 버튼을 눌렀을때 동작하는 함수\n     * @param {*} event \n     */\n    function cardBtnClickEventhandle(e) {\n        let btnFlg = e.target.innerText  // 완료, 취소, 삭제 값을 가진다.        \n        let todoId = e.target.id // 해당 todo의 아이디값을 가져온다. \n\n        if (btnFlg === '삭제') {\n            dispatch(deleteTodo())\n        } else if (btnFlg == '완료' || btnFlg == '취소') {\n            dispatch(updateTodo())\n        } else {\n            dispatch(selectTodo())\n        }\n    }\n\n\n    // todos.isDone 값에 따라 리턴되는 배열을 달리한다.\n    return (\n        <>\n            {\n                todos.filter((item) => {\n                    return area == 'workingZoen' ? item.isDone == false : item.isDone == true\n                }).map((item) => {\n                    return (\n                        <div key={item.id} className=\"task\">\n                            <div className=\"task-title\">{item.title}</div>\n                            <div className=\"task-body\">{item.body}</div>\n                            <div className=\"task-btns\">\n                                <button onClick={cardBtnClickEventhandle} id={item.id}>삭제</button>\n                                <button onClick={cardBtnClickEventhandle} id={item.id}>{area == 'workingZoen' ? '완료' : '취소'}</button>\n                            </div>\n                        </div>\n                    )\n                })\n            }\n        </>\n    )\n}\n\nexport default Todo;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}