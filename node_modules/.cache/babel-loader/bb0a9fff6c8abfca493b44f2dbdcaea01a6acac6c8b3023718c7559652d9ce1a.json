{"ast":null,"code":"/**\n * todoReducer\n * \n */\n\n// 액션 타입\nconst CRATE_TODO = \"CRATE_TODO\"; // TODO 추가\nconst DELETE_TODO = \"DELETE_TODO\"; // TODO 삭제\nconst UPDATE_TODO = \"UPDATE_TODO\"; // TODO 수정 (제목, 내용)\nconst SELECT_TODO = \"SELECT_TODO\"; // TODO 상세보기\nconst TOGGLE_TODO = \"TOGGLE_TODO\"; // TODO 상태변경\n\n// ActionCreater\nexport const crateTodo = data => {\n  return {\n    type: CRATE_TODO,\n    payload: data\n  };\n};\nexport const deleteTodo = data => {\n  return {\n    type: DELETE_TODO,\n    payload: data\n  };\n};\nexport const updateTodo = data => {\n  return {\n    type: UPDATE_TODO,\n    payload: data\n  };\n};\nexport const selectTodo = () => {\n  return {\n    type: SELECT_TODO\n  };\n};\nexport const toggleTodo = data => {\n  return {\n    type: TOGGLE_TODO,\n    payload: data\n  };\n};\n\n// 초기상태값\nconst initState = {\n  todo: {\n    id: 0,\n    isDone: false,\n    title: '',\n    body: ''\n  },\n  todoList: []\n};\n\n/**\n * 리듀서 : state를 액션의 타입에 맞추어서 변화를 일으키는 함수\n * 액션 : state를 어떻게 변화시킬지 타입과 내용을 기록한것\n * @param {} initState \n * @param {} action \n */\n\nconst todoReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log(\"0. state:\", state, \", state.id:\", state.id);\n  switch (action.type) {\n    case CRATE_TODO:\n      return {\n        todo: {\n          id: state.todo.id + 1,\n          isDone: false,\n          title: '',\n          body: ''\n        },\n        todoList: [...state.todoList, state.todo]\n      };\n    case DELETE_TODO:\n      state.todoList = state.todoList.filter(x => {\n        return x.id != action.payload;\n      });\n      return {\n        todo: {\n          id: state.todo.id,\n          isDone: false,\n          title: '',\n          body: ''\n        },\n        todoList: state.todoList\n      };\n    case UPDATE_TODO:\n      return {\n        todo: {\n          id: state.todo.id,\n          title: action.payload.title,\n          body: action.payload.body,\n          isDone: false\n        },\n        todoList: state.todoList\n      };\n    case TOGGLE_TODO:\n      state.todoList.map(x => {\n        if (x.id == action.payload) {\n          x.isDone = !x.isDone;\n        }\n      });\n      return {\n        todo: {\n          id: state.todo.id,\n          isDone: false,\n          title: '',\n          body: ''\n        },\n        todoList: [...state.todoList]\n      };\n    case SELECT_TODO:\n      // TODO 상세보기, 상세보기 하면서 상태값 변경 (리스트는 그대로 입력값은 초기값으로\n      return {\n        id: state.id + 1,\n        isDone: false,\n        title: '',\n        body: ''\n      };\n    default:\n      return {\n        todo: {\n          id: state.todo.id,\n          isDone: false,\n          title: '',\n          body: ''\n        },\n        todoList: []\n      };\n  }\n};\nexport default todoReducer;","map":{"version":3,"names":["CRATE_TODO","DELETE_TODO","UPDATE_TODO","SELECT_TODO","TOGGLE_TODO","crateTodo","data","type","payload","deleteTodo","updateTodo","selectTodo","toggleTodo","initState","todo","id","isDone","title","body","todoList","todoReducer","state","arguments","length","undefined","action","console","log","filter","x","map"],"sources":["/Users/jooyoungshin/first-react-to-do/src/redux/modules/todoReduser.js"],"sourcesContent":["/**\n * todoReducer\n * \n */\n\n// 액션 타입\nconst CRATE_TODO = \"CRATE_TODO\"     // TODO 추가\nconst DELETE_TODO = \"DELETE_TODO\"   // TODO 삭제\nconst UPDATE_TODO = \"UPDATE_TODO\"   // TODO 수정 (제목, 내용)\nconst SELECT_TODO = \"SELECT_TODO\"   // TODO 상세보기\nconst TOGGLE_TODO = \"TOGGLE_TODO\"   // TODO 상태변경\n\n// ActionCreater\nexport const crateTodo = (data) => {\n    return {\n        type: CRATE_TODO,\n        payload: data\n    }\n}\n\nexport const deleteTodo = (data) => {\n    return {\n        type: DELETE_TODO,\n        payload : data,\n    }\n}\n\nexport const updateTodo = (data) => {\n    return {\n        type: UPDATE_TODO,\n        payload: data\n    }\n}\n\nexport const selectTodo = () => {\n    return {\n        type: SELECT_TODO,\n    }\n}\n\nexport const toggleTodo = (data) => {\n    return {\n        type: TOGGLE_TODO,\n        payload : data\n    }\n}\n\n\n\n// 초기상태값\nconst initState = {\n    todo : {\n        id: 0,\n        isDone: false,\n        title:'',\n        body:''\n    },\n    todoList : []\n}\n\n/**\n * 리듀서 : state를 액션의 타입에 맞추어서 변화를 일으키는 함수\n * 액션 : state를 어떻게 변화시킬지 타입과 내용을 기록한것\n * @param {} initState \n * @param {} action \n */\n\n\nconst todoReducer = (state = initState, action) => {\n    console.log(\"0. state:\",state, \", state.id:\",state.id)\n    switch (action.type) {\n        case CRATE_TODO:\n            return {\n                todo : {\n                    id: state.todo.id + 1,\n                    isDone: false,\n                    title: '',\n                    body: ''\n                },\n                todoList : [...state.todoList, state.todo]\n            }\n        case DELETE_TODO:       \n            state.todoList = state.todoList.filter((x)=>{\n                return x.id != action.payload\n            })\n            return {\n                todo : {\n                    id: state.todo.id,\n                    isDone: false,\n                    title: '',\n                    body: ''\n                },\n                todoList : state.todoList\n            }\n        case UPDATE_TODO:\n            return {\n                todo : {\n                    id: state.todo.id,\n                    title: action.payload.title,\n                    body: action.payload.body,\n                    isDone : false\n                },\n                todoList : state.todoList\n            }\n        case TOGGLE_TODO:\n            state.todoList.map((x) => {\n                    if(x.id == action.payload){\n                        x.isDone = !x.isDone\n                    }\n                }\n            );\n            return {\n                todo : {\n                    id: state.todo.id,\n                    isDone: false,\n                    title: '',\n                    body: ''\n                },\n                todoList : [...state.todoList]\n            }\n        case SELECT_TODO:\n            // TODO 상세보기, 상세보기 하면서 상태값 변경 (리스트는 그대로 입력값은 초기값으로\n            return {\n                id: state.id+1,\n                isDone: false,\n                title:'',\n                body:''\n            }\n        default:\n            return {\n                todo : {\n                    id: state.todo.id,\n                    isDone: false,\n                    title: '',\n                    body: ''\n                },\n                todoList : []\n            }\n\n\n            \n            \n    }\n}\n\nexport default todoReducer"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}