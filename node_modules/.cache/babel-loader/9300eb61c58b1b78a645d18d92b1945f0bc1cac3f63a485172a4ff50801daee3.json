{"ast":null,"code":"var _jsxFileName = \"/Users/jooyoungshin/first-react-to-do/src/component/Todo.jsx\",\n  _s = $RefreshSig$();\nimport { useDispatch, useSelector } from 'react-redux';\nimport { crateTodo, deleteTodo, updateTodo, selectTodo } from '../redux/modules/todoReduser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Todo = _ref => {\n  _s();\n  let {\n    area\n  } = _ref;\n  /** 스토어에 접근해서 값을 읽어보자 */\n  const todos = useSelector(state => {\n    console.log(\"todo 컴포넌트에서!. 스토어 접근후 가져온값 > \", state.todoReducer.todoList);\n    return state.todoReducer.todoList;\n  });\n\n  /** 컴포넌트의 요청정보를 스토어로 전달해줄 디스패처를 불러온다 */\n  const dispatch = useDispatch();\n\n  /**\n   * 완료, 취소, 삭제 버튼을 눌렀을때 동작하는 함수\n   * @param {*} event \n   */\n  function cardBtnClickEventhandle(e) {\n    let btnFlg = e.target.innerText; // 완료, 취소, 삭제 값을 가진다.        \n    let todoId = e.target.id; // 해당 todo의 아이디값을 가져온다. \n\n    if (btnFlg === '삭제') {\n      dispatch(deleteTodo(todoId));\n    } else if (btnFlg == '완료' || btnFlg == '취소') {\n      dispatch(updateTodo({\n        title: e.target.value,\n        body: todoList.todo.body,\n        isDone: !todoList.todo.isDone\n      }));\n    } else {\n      dispatch(selectTodo());\n    }\n  }\n\n  // todos.isDone 값에 따라 리턴되는 배열을 달리한다.\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: todos.filter(item => {\n      return area == 'workingZoen' ? item.isDone == false : item.isDone == true;\n    }).map(item => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-title\",\n          children: item.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-body\",\n          children: item.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-btns\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: cardBtnClickEventhandle,\n            id: item.id,\n            children: \"\\uC0AD\\uC81C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: cardBtnClickEventhandle,\n            id: item.id,\n            children: area == 'workingZoen' ? '완료' : '취소'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 29\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 25\n      }, this);\n    })\n  }, void 0, false);\n};\n_s(Todo, \"FiMoGXqJtx1oUFQRG74TZ9QIm7U=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = Todo;\nexport default Todo;\nvar _c;\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"names":["useDispatch","useSelector","crateTodo","deleteTodo","updateTodo","selectTodo","jsxDEV","_jsxDEV","Fragment","_Fragment","Todo","_ref","_s","area","todos","state","console","log","todoReducer","todoList","dispatch","cardBtnClickEventhandle","e","btnFlg","target","innerText","todoId","id","title","value","body","todo","isDone","children","filter","item","map","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/jooyoungshin/first-react-to-do/src/component/Todo.jsx"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { crateTodo, deleteTodo, updateTodo, selectTodo } from '../redux/modules/todoReduser'\n\nconst Todo = ({area }) => {\n\n    /** 스토어에 접근해서 값을 읽어보자 */\n    const todos = useSelector((state) => {\n        console.log(\"todo 컴포넌트에서!. 스토어 접근후 가져온값 > \", state.todoReducer.todoList)\n        return state.todoReducer.todoList\n    })\n\n    /** 컴포넌트의 요청정보를 스토어로 전달해줄 디스패처를 불러온다 */\n    const dispatch = useDispatch()\n\n    /**\n     * 완료, 취소, 삭제 버튼을 눌렀을때 동작하는 함수\n     * @param {*} event \n     */\n    function cardBtnClickEventhandle(e) {\n        let btnFlg = e.target.innerText  // 완료, 취소, 삭제 값을 가진다.        \n        let todoId = e.target.id // 해당 todo의 아이디값을 가져온다. \n\n        if (btnFlg === '삭제') {\n            dispatch(deleteTodo(todoId))\n        } else if (btnFlg == '완료' || btnFlg == '취소') {\n            dispatch(updateTodo({title: e.target.value, body: todoList.todo.body, isDone: !(todoList.todo.isDone)}))\n        } else {\n            dispatch(selectTodo())\n        }\n    }\n\n\n    // todos.isDone 값에 따라 리턴되는 배열을 달리한다.\n    return (\n        <>\n            {\n                todos.filter((item) => {\n                    return area == 'workingZoen' ? item.isDone == false : item.isDone == true\n                }).map((item) => {\n                    return (\n                        <div key={item.id} className=\"task\">\n                            <div className=\"task-title\">{item.title}</div>\n                            <div className=\"task-body\">{item.body}</div>\n                            <div className=\"task-btns\">\n                                <button onClick={cardBtnClickEventhandle} id={item.id}>삭제</button>\n                                <button onClick={cardBtnClickEventhandle} id={item.id}>{area == 'workingZoen' ? '완료' : '취소'}</button>\n                            </div>\n                        </div>\n                    )\n                })\n            }\n        </>\n    )\n}\n\nexport default Todo;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}